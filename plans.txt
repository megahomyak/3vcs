Repository versions are stored in a tree

Each element in the tree can have its children, with names to identify them. That is, any versioned repo is like this:

let root = Layer {
    contents: ...,
    children: {
        "somename": Layer { ... },
        "somename2": Layer { ... },
    },
};

And any revisioning work being done is really kind of like messing around with regular files on the filesystem, just with extreme nesting for sequences (like, a chain of sequential `git commit`s will produce an implicit tree of commits, but here it's just gonna be very explicit, and the actual unique identifier of the "commit" (layer) will be the entire path from the very first commit)

So, essentially, this thing will be a filesystem for your filesystem, just without directories (with "files" being able to contain children, it's like a separate container - one is reserved for layer data, one is reserved for all children layers, as shown in a fake code excerpt above)

{
() -> X
() -> somename
} => only "pivot" will be available, i.e. you'll have to know preemptively what you're gonna do. and that's unfortunate

if implemented with "save":
{
name -> X
name -> somename
} => "somename" can just be a branch name. "pivot blah" would create a new layer called "blah" with the parent being the current layer (cur -> blah), and "save blah" would do the pivot and then swap the names (blah -> cur). i can theoretically just make the "save" unavailable for the very first commit, but, like, ugh. that's unfortunate. the user will be forced to do the swapping later. it would be much nicer to just have every layer have a name, which will make an empty path impossible. or maybe it will be possible, it just won't be technically used for anything except for storing the various initial layers. and if so, it would be nice to have not the layers themselves store the files, but only make the connections store them, but that will drag me dangerously close to "git"; however, since there's only one incoming line to each node (because every node is part of a tree), i can still allow the user to "edit the layer" and then, on pushing, i can still just ignore every layer that doesn't have children

so, given all of the above, technically the representation will now look like this:

let root = Layer {
    children: {
        "somename": Connection {
            contents: ...,
            layer: Layer { ... }
        },
        "somename2": Connection {
            contents: ...,
            layer: Layer { ... }
        },
    }
};

it means that, technically, it's not the nodes that we're choosing right now, it's the *connections* that we have selected. we always add and operate on connections, not the layers themselves. it would be the same thing as if the root node was an invalid path - that is, the root node won't exist at all and will not be "just a directory". however, if we imagine all the nodes being directories and all the links between them being files, it becomes simpler, so i guess i'll stick to this idea with nodes being directories and node connections storing information. and so, if we'll need to get to a connection, we'll have to specify the path to it. and if we start on a certain connection... ugh. this becomes uncool when i realize that "[]" will never be a valid path to stand on, only something like "['somename']" would, and that would be the minimal we can get. unfortunate. if i want to get rid of that, i will have to go more into the direction of git and decouple the current changes from any particular commit and make them their own, separate, annoying, complicating entity

however, if i'm coming down to the concepts of files and directories, one interesting use case is this: what if the system will get used like folders with copies of the program? like, the programmer wants to do a certain new change and is thus copying the entire program file tree into a different location, does changes there and then merges them into main if changes were successful. this is very basic and is probably even a new niche that "git" didn't take. so, i can just make the pivoting the only operation, and then also introduce renaming. so, essentially

* every layer is like a directory containing two other directories: "children" and "contents"
* "3 pivot childname" - creating a layer child with name childname in the current layer and switching to it
* "3 rename newname" - rename the current layer to newname
* "3 init" - initializing the system with the first layer having no "children"
* "3 switch layerpath" - switching to layer with path layerpath
* "3 rm layerpath" - removing a layer with path layerpath
* "3 mv layerpath" - move current layer to path layerpath

now, onto pulling and pushing...
