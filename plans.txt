Simple tree of diffs
One tree on top of that for remote/local difference handling

If I can make a three-way merge {(base, change1, change2) -> change3 with possibility of merge conflict}, I can likely resolve all the local-remote sync bullshit through that:

"B" = "Base"/"Both" (i.e. present on both local and remote)
"R" = "Remote"
"L" = "Local"

Remote: B-B-R-R-R => B-R
Local: B-B-L-L => B-L

Needed transformation of both: B-* => B-R-L

"B" serves as a base, "R" and "L" are the two sets of changes. Since these are changes of changes, they will store stuff like adding or editing layers. I guess merging a change of a change of the same layer wouldn't be that bad? Also, I need to ensure nothing breaks to shit; since I'm going through the internals here, it's really easy to, say, make some layer point to a layer that doesn't exist anymore, if on one side a layer was created, and on the other one was deleted. I guess an integrity check might be useful here, but it's quite computationally expensive; if this were just a "plain dumb tree", everything would've been handled by the filesystem, although I guess the intricacies might still be fucked up. Maybe I just need a separate representation for the changes queue, have some more internal validation, that kind of stuff? This is tough.

B-* => B-R-L: pull the remote changes, find the common base, try to merge the two. Although here would I should use is probably a rebase and not a merge, if I want to do B-R-L and not B-Merge. Although I can leave B-R-L on remote and locally I can have something like B-Merge, that is if I restrict the push operation if there's nothing to pull. So, like, if the merge cannot be done, then we just error out or maybe make a merge conflict and let the user resolve it, but anyway what we will be left with will either be B-Merge or B-L <- the second case is what we started with so it's covered, and the first case will have an L-only two-way diff with the remote

Although I should probably think of a case when:

Remote (layer: "remote v1"): A-B (serves as common base)
User 1 (layer: "local v2"): A (deleted B. What happens inside: A/children -= B; del B/contents; del B/children; del B/parent)
User 2 (layer: "local v2"): A-B-C (added C as child of B. What happens inside: B/children += C; C/parent += B; C/contents = ...)

Two cases remain:
* User 1 pushes first
* User 2 pushes first

"User 1 pushes first":
Remote (layer: "remote v2"): A
User 2 (layer: "local v2"): A-B-C
Common base (layer: "remote v1"): A-B
If User 2 pushes now, he'll have to pull first; on a pull, the remote history (only the "remote v2" in this case) is pulled to the local meta-tree as a separate branch (that is, the local tree will now look like "remote v1"-{"remote v2", "local v2"}), then a three-way merge is done to produce a "remote v3" on the client; BUT!: the merge takes (base="remote v1", change1="remote v2", change2="local v2"), and there's a conflict between just editing B/children and deleting B/children

And "User 2 pushes first" is equivalent because now it's the same thing, just the changes are swapped (in "User 2 pushes first", "remote v2" and "local v2" will be swapped from "User 1 pushes first", everything else will be equivalent)

Proposal: call the meta-tree (the tree of the tree) a "vee-vee tree" ("vv tree", or just "vv" - "version version tree", and then the regular one will just be called a "v" tree)

BUT!!!!: there's still this case:
Remote: A-B-C
User 1: del B (A/children -= B; del B; del C <- THIS IS WHAT SAVES IT. I should do all deletions recursively, that's how we can find out shit gone bad when merging changes from some other person)
User 2: edit C (C/contents = ... <- goes bad because of "del C" from User 1)
